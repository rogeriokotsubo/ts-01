/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {

eval("var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass Validator {\r\n    constructor(data) {\r\n        this.data = data;\r\n    }\r\n}\r\nclass StringValidator extends Validator {\r\n    constructor(data) {\r\n        super(data);\r\n        if (typeof data === 'string') {\r\n            console.log(`${data} é string.`);\r\n        }\r\n        else {\r\n            throw new Error('O tipo está errado');\r\n        }\r\n    }\r\n}\r\nclass NumberValidator extends Validator {\r\n    constructor(data) {\r\n        super(data);\r\n        if (typeof data === 'number') {\r\n            console.log(`${data} é number`);\r\n        }\r\n        else {\r\n            throw new Error('O tipo está errado');\r\n        }\r\n    }\r\n}\r\nclass BooleanValidator extends Validator {\r\n    constructor(data) {\r\n        super(data);\r\n        if (typeof data === 'boolean') {\r\n            console.log(`${data} é boolean`);\r\n        }\r\n        else {\r\n            throw new Error('O tipo está errado');\r\n        }\r\n    }\r\n}\r\nclass EmailInput extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        this.inputEmail = document.createElement('input');\r\n        this.inputEmail.onchange = (event) => this.onChange(event);\r\n        shadow.appendChild(this.inputEmail);\r\n    }\r\n    onChange(event) {\r\n        try {\r\n            const objEmail = new EmailValidator(this.inputEmail.value);\r\n            console.log(`e-mail: ${objEmail.data}`);\r\n        }\r\n        catch (e) {\r\n            this.inputEmail.value = '';\r\n        }\r\n    }\r\n}\r\nclass PwdInput extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        this.inputPwd = document.createElement('input');\r\n        this.inputPwd.type = 'password';\r\n        this.inputPwd.onchange = (event) => this.onChange(event);\r\n        shadow.appendChild(this.inputPwd);\r\n    }\r\n    onChange(event) {\r\n        try {\r\n            const objPwd = new PwdValidator(this.inputPwd.value);\r\n            console.log(`Pwd: ${objPwd.data}`);\r\n        }\r\n        catch (e) {\r\n            this.inputPwd.value = '';\r\n        }\r\n    }\r\n}\r\nclass NameInput extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        this.inputName = document.createElement('input');\r\n        this.inputName.onchange = (event) => this.onChange(event);\r\n        shadow.appendChild(this.inputName);\r\n    }\r\n    onChange(event) {\r\n        try {\r\n            const objName = new NameValidator(this.inputName.value);\r\n            console.log(`Name: ${objName.data}`);\r\n        }\r\n        catch (e) {\r\n            this.inputName.value = '';\r\n        }\r\n    }\r\n}\r\nclass RegexValidator extends StringValidator {\r\n    constructor(data) {\r\n        super(data);\r\n        this._regexp = new RegExp('');\r\n    }\r\n    get regexp() {\r\n        return this._regexp;\r\n    }\r\n}\r\nclass EmailValidator extends RegexValidator {\r\n    constructor(data) {\r\n        super(data);\r\n        this._regexp = /^(\\w{1,}@\\w{1,}\\.(\\w{3})(\\.\\w{2}){0,1})$/gim;\r\n        const emailOk = this.regexp.test(data);\r\n        if (emailOk === true) {\r\n            console.log(`O e-mail ${data} é válido.`);\r\n        }\r\n        else {\r\n            throw new Error('O e-mail não é válido');\r\n        }\r\n    }\r\n}\r\nclass PwdValidator extends RegexValidator {\r\n    constructor(data) {\r\n        super(data);\r\n        this._regexp = /^\\w{1,}$/gim;\r\n        const pwdOk = this.regexp.test(data);\r\n        if (pwdOk === true) {\r\n            console.log(`A senha ${data} é válida.`);\r\n        }\r\n        else {\r\n            throw new Error('A senha não é válida');\r\n        }\r\n    }\r\n}\r\nclass NameValidator extends RegexValidator {\r\n    constructor(data) {\r\n        super(data);\r\n        this._regexp = /^([a-z]{1,})([ ]{1}[a-z]{1,}){0,}$/gim;\r\n        const nameOk = this.regexp.test(data);\r\n        if (nameOk === true) {\r\n            console.log(`O nome ${data} é válido.`);\r\n        }\r\n        else {\r\n            throw new Error('o Nome não é válido');\r\n        }\r\n    }\r\n}\r\nclass UserForm extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        const shadow = this.attachShadow({ mode: 'open' });\r\n        this.form = document.createElement(\"form\");\r\n        this.emailField = new EmailInput();\r\n        this.emailField.inputEmail.required = true;\r\n        this.emailField.inputEmail.placeholder = \"Email\";\r\n        this.userNameField = new NameInput();\r\n        this.userNameField.inputName.required = true;\r\n        this.userNameField.inputName.placeholder = \"Name\";\r\n        this.pwdField = new PwdInput();\r\n        this.pwdField.inputPwd.required = true;\r\n        this.pwdField.inputPwd.placeholder = \"Password\";\r\n        const createStore = document.createElement(\"button\");\r\n        createStore.innerText = \"Cadastrar\";\r\n        createStore.type = \"button\";\r\n        createStore.onclick = () => this.onCreate();\r\n        const createLogin = document.createElement(\"button\");\r\n        createLogin.innerText = \"Login\";\r\n        createLogin.type = \"button\";\r\n        createLogin.onclick = () => this.onLogin();\r\n        const createUpdate = document.createElement(\"button\");\r\n        createUpdate.innerText = \"Login\";\r\n        createUpdate.type = \"button\";\r\n        createUpdate.onclick = () => this.onUpdate();\r\n        shadow.appendChild(this.form);\r\n    }\r\n    onCreate() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.emailField.inputEmail.value)\r\n                return;\r\n            if (!this.userNameField.inputName.value)\r\n                return;\r\n            if (!this.pwdField.inputPwd.value)\r\n                return;\r\n            const userData = {\r\n                email: this.emailField.inputEmail.value,\r\n                name: this.userNameField.inputName.value,\r\n                password: this.pwdField.inputPwd.value\r\n            };\r\n            const response = yield fetch('http://localhost:8000/accounts', {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            }).then(resp => resp.json());\r\n        });\r\n    }\r\n    onLogin() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.emailField.inputEmail.value)\r\n                return;\r\n            if (!this.userNameField.inputName.value)\r\n                return;\r\n            if (!this.pwdField.inputPwd.value)\r\n                return;\r\n            const userData = {\r\n                email: this.emailField.inputEmail.value,\r\n                name: this.userNameField.inputName.value,\r\n                password: \"\"\r\n            };\r\n            const response = yield fetch('http://localhost:8000/accounts/login', {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            }).then(resp => resp.json());\r\n        });\r\n    }\r\n    onUpdate() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.emailField.inputEmail.value)\r\n                return;\r\n            if (!this.userNameField.inputName.value)\r\n                return;\r\n            if (!this.pwdField.inputPwd.value)\r\n                return;\r\n            const userData = {\r\n                email: this.emailField.inputEmail.value,\r\n                name: this.userNameField.inputName.value,\r\n                password: this.pwdField.inputPwd.value\r\n            };\r\n            const response = yield fetch('http://localhost:8000/accounts', {\r\n                method: \"PATCH\",\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            }).then(resp => resp.json());\r\n        });\r\n    }\r\n}\r\ncustomElements.define('input-email', EmailInput);\r\ncustomElements.define('input-name', NameInput);\r\ncustomElements.define('input-pwd', PwdInput);\r\ncustomElements.define('user-form', UserForm);\r\n\n\n//# sourceURL=webpack://my-webpack-project/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;